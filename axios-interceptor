import axios from 'axios'
import store from '../store/index'
import {url} from '../config/server'
import {getCookie, setCookie, delCookie} from '@/plugins/cookie'
import router from '../router'
import { Message } from 'element-ui';
import messages from '../lang/index.js'
function lang () {
  // 将选择的语言存在localStorage中
  let t = window.localStorage.getItem('language')
  if (t) return t
  else return 'cn'
}
var serverErr = messages[lang()].err.undefined;
const instance = axios.create({
  baseURL: url,

  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000
});

instance.interceptors.request.use(function (config) {
  // Do something before request is sent
  const token = getCookie('token')
  var reg = /.json/
  if (token && !reg.test(config.url)) {
    config.headers.Authorization = token
  }
  return config;
}, function (error) {
  // Do something with request error
  return Promise.reject(error);
});

instance.interceptors.response.use(function (response) {
  // Do something with response data
  //如果是请求的语言JSON文件 需要单独处理
  var reg = /.json/
  if(reg.test(response.config.url)){
    return response
  }
  //非语言文件根据code来返回相应的错误或数据
  if(response.data.code != undefined){
    if(response.data.code != 0){
      if (response.data.code == 30001) {
        delCookie('token');
        store.commit('setToken', '');
        router.push('/user/login');
      }else{
        if(window.$vm){
          Message.error({message: $vm.$t('err.'+response.data.code)});
          return response;
        }
      }
    }else{
      console.log(response)
      return response;
    }
  }else{
    Message.error({message: serverErr});
    return response;
  }
}, function (error) {
  // Do something with response error
  Message.error({message: serverErr});
  return response;
});


export default instance

//在自定义api接口中引入并使用
import $http from '@/plugins/$http'

export function phoneVerifyCode (data) {
  return $http.post(`/users/phone`, data).then(res=>{
    //Promise.resolve(res.data);
    return res.data
  })
}

//组件中引入api的自定义接口，根据code的值做出不同响应(报错响应信息存在于拦截器中了，但可能还会有其他的操作，比如出错时，获取验证码的倒计时)

getCode() {
  let data = { phone: this.phone };
  this._countDown();
  phoneVerifyCode(data).then(data => {
    if (data.code == 0) {
      this.$message.success(this.$t("personcenter.send"));
    } else {
      this._countOver();//出错时，获取验证码倒计时置为0，可以再次获取验证码
    }
  });
},
